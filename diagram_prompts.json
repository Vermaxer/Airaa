{
"enhance_uml": {
  "prompt": "Analyze and improve the following PlantUML code. Ensure proper syntax, correct indentation, and all necessary tags. Do not provide explanations, only return the enhanced UML code:\n\n{original_code}\n\nReturn only the improved PlantUML code, starting with @startuml and ending with @enduml."
},
  "class": {
    "prompt": "Create a class diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for class diagrams.\n2. Include all major classes from the repository.\n3. For each class, list important attributes and methods.\n4. Show relationships between classes (inheritance, association, composition, etc.).\n5. Use appropriate visibility modifiers (+, -, #) for attributes and methods.\n6. Include cardinality in relationships where applicable.\n7. Group related classes using packages if necessary.\n8. Add notes to explain complex relationships or important details.\n9. Use real class, method, and attribute names from the analyzed repository.\n\nPlantUML syntax example:\n@startuml\npackage \"Core\" {\n  abstract class AbstractUser {\n    - id: int\n    - username: string\n    + login(password: string): bool\n    + logout(): void\n  }\n  class User {\n    - email: string\n    + updateProfile(data: dict): bool\n  }\n  class Admin {\n    + banUser(user: User): void\n  }\n}\npackage \"Content\" {\n  class Post {\n    - id: int\n    - title: string\n    - content: string\n    + create(): bool\n    + update(): bool\n  }\n}\nAbstractUser <|-- User\nAbstractUser <|-- Admin\nUser \"1\" -- \"*\" Post : creates\nnote right of User : Regular user with\nbasic privileges\n@enduml\n\nGenerate the complete PlantUML code for the class diagram, starting with @startuml and ending with @enduml."
  },
  "sequence": {
    "prompt": "Create a sequence diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for sequence diagrams.\n2. Identify the main actors and components involved in a key process.\n3. Show the sequence of interactions between these actors and components.\n4. Include method calls, responses, and any important data being passed.\n5. Use activation boxes to show when each component is active.\n6. Include alternative flows or optional steps using 'alt' and 'opt' blocks.\n7. Add notes to explain complex interactions or important details.\n8. Use real method names and component names from the analyzed repository.\n9. Show any loops or iterations using 'loop' blocks.\n10. Include any important conditions that affect the flow of the sequence.\n\nPlantUML syntax example:\n@startuml\nactor User\nparticipant \"Frontend\" as FE\nparticipant \"AuthService\" as Authparticipant \"Backend\" as BE\ndatabase \"Database\" as DB\n\nUser -> FE: Login request\nactivate FE\nFE -> Auth: Authenticate(credentials)\nactivate Auth\nAuth -> DB: Verify credentials\nactivate DB\nDB --> Auth: Credentials valid\ndeactivate DB\nAuth --> FE: Authentication token\ndeactivate Auth\nFE --> User: Login successful\n\nalt Invalid credentials\n    Auth --> FE: Authentication failed\n    FE --> User: Login failed message\nend\n\nloop For each dashboard widget\n    FE -> BE: Fetch widget data\n    activate BE\n    BE -> DB: Query data\n    activate DB\n    DB --> BE: Return data\n    deactivate DB\n    BE --> FE: Widget data\n    deactivate BE\nend\n\nFE --> User: Display dashboard\ndeactivate FE\n\nnote right of FE: The frontend aggregates\ndata from multiple\nsources to build the dashboard\n@enduml\n\nGenerate the complete PlantUML code for the sequence diagram, starting with @startuml and ending with @enduml."
  },
  "usecase": {
    "prompt": "Create a use case diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for use case diagrams.\n2. Identify and include all major actors (users, external systems) interacting with the system.\n3. List all significant use cases (main functionalities) of the system.\n4. Show relationships between actors and use cases using lines.\n5. Include relationships between use cases (e.g., 'include', 'extend') where appropriate.\n6. Group related use cases into systems or subsystems using rectangles.\n7. Add notes to explain complex relationships or provide additional context.\n8. Use real actor names and use case names from the analyzed repository.\n9. Show any inheritance relationships between actors if applicable.\n10. Include a title for the diagram that reflects the overall system or process being depicted.\n\nPlantUML syntax example:\n@startuml\nleft to right direction\ntitle E-commerce System\n\nactor \"Customer\" as customer\nactor \"Admin\" as admin\nactor \"Payment Gateway\" as payment\n\nrectangle \"E-commerce System\" {\n  usecase \"Browse Products\" as UC1\n  usecase \"Add to Cart\" as UC2\n  usecase \"Checkout\" as UC3\n  usecase \"Process Payment\" as UC4\n  usecase \"Manage Inventory\" as UC5\n  usecase \"Generate Reports\" as UC6\n\n  UC3 .> UC4 : include\n  UC3 .> UC5 : include\n}\n\ncustomer --> UC1\ncustomer --> UC2\ncustomer --> UC3\nadmin --> UC5\nadmin --> UC6\npayment --> UC4\n\nnote right of UC4 : Handled by external\npayment service\n\n@enduml\n\nGenerate the complete PlantUML code for the use case diagram, starting with @startuml and ending with @enduml."
  },
  "activity": {
    "prompt": "Create an activity diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for activity diagrams.\n2. Identify a key process or workflow in the system to diagram.\n3. Start with an initial node and end with one or more final nodes.\n4. Include all major activities and decision points in the process.\n5. Use decision diamonds for branching logic, showing different paths based on conditions.\n6. Include fork and join nodes for parallel activities if applicable.\n7. Use swimlanes to organize activities by actor or subsystem if relevant.\n8. Add notes to explain complex decisions or provide additional context.\n9. Include any important objects that flow through the process.\n10. Use real activity and decision names from the analyzed repository.\n11. Show any loops or repetitions in the process.\n12. Include error handling or exception paths where relevant.\n\nPlantUML syntax example:\n@startuml\ntitle Order Processing Workflow\n\nstart\n:Receive Order;\n\nif (Stock Available?) then (yes)\n  :Reserve Stock;\nelse (no)\n  :Add to Backorder;\n  note right: Notify customer\n  about delay\nendif\n\nfork\n  :Process Payment;\nfork again\n  :Prepare Shipment;\njoin\n\nif (Payment Successful?) then (yes)\n  :Ship Order;\n  :Send Confirmation Email;\nelse (no)\n  :Cancel Order;\n  :Notify Customer;\nendif\n\nstop\n\n@enduml\n\nGenerate the complete PlantUML code for the activity diagram, starting with @startuml and ending with @enduml."
  },
  "component": {
    "prompt": "Create a component diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for component diagrams.\n2. Identify and include all major components of the system.\n3. Show interfaces provided and required by each component.\n4. Illustrate dependencies between components using appropriate connectors.\n5. Group related components into packages or subsystems if applicable.\n6. Include external systems or services that interact with the main system.\n7. Use different shapes or colors to distinguish between types of components if needed.\n8. Add notes to explain complex interactions or provide additional context.\n9. Use real component and interface names from the analyzed repository.\n10. Show any important protocols or data formats used in component interactions.\n11. Include a title that reflects the overall system architecture.\n\nPlantUML syntax example:\n@startuml\ntitle E-commerce System Architecture\n\npackage \"Frontend\" {\n  [Web UI] as WebUI\n  [Mobile App] as MobileApp\n}\n\npackage \"Backend\" {\n  [User Service] as UserService\n  [Product Service] as ProductService\n  [Order Service] as OrderService\n  [Payment Service] as PaymentService\n}\n\ndatabase \"User DB\" as UserDB\ndatabase \"Product DB\" as ProductDB\ndatabase \"Order DB\" as OrderDB\n\ncloud {\n  [External Payment Gateway] as PaymentGateway\n}\n\ninterface \"REST API\" as API\n\nWebUI --( API\nMobileApp --( API\n\nAPI - UserService\nAPI - ProductService\nAPI - OrderService\n\nUserService --> UserDB\nProductService --> ProductDB\nOrderService --> OrderDB\n\nOrderService --> PaymentService\nPaymentService --> PaymentGateway\n\nnote right of PaymentGateway : Handles secure\npayment processing\n\n@enduml\n\nGenerate the complete PlantUML code for the component diagram, starting with @startuml and ending with @enduml."
  },
  "state": {
    "prompt": "Create a state diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for state diagrams.\n2. Identify a key object or process in the system whose states you'll diagram.\n3. Include all major states that the object or process can be in.\n4. Show transitions between states, labeling them with events that trigger the transition.\n5. Include any actions that occur during transitions or within states.\n6. Use initial and final states where appropriate.\n7. Include any important guard conditions on transitions.\n8. Show any internal transitions or self-transitions within states.\n9. Use composite states for groups of substates if applicable.\n10. Add notes to explain complex transitions or provide additional context.\n11. Use real state names and event names from the analyzed repository.\n12. Include any important entry or exit actions for states.\n\nPlantUML syntax example:\n@startuml\ntitle Order State Machine\n\n[*] --> Created\n\nstate Created {\n  [*] --> AwaitingPayment\n  AwaitingPayment --> Paid : payment received\n  AwaitingPayment --> Cancelled : cancel order\n}\n\nPaid --> Processing : begin processing\nProcessing --> Shipped : ship order\nShipped --> Delivered : order received\n\nstate Cancelled {\n  Cancelled --> Refunded : process refund\n}\n\nDelivered --> [*]\nRefunded --> [*]\n\nnote right of Processing : Order is being\nprepared for shipment\n\n@enduml\n\nGenerate the complete PlantUML code for the state diagram, starting with @startuml and ending with @enduml."
  },
  "object": {
    "prompt": "Create an object diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for object diagrams.\n2. Identify key objects in the system that represent a specific scenario or system state.\n3. Include object names and their respective classes.\n4. List important attributes of each object with their current values.\n5. Show relationships between objects using appropriate connectors.\n6. Use real object names, class names, and attribute names from the analyzed repository.\n7. Include multiplicity in relationships where applicable.\n8. Add notes to explain complex relationships or provide additional context.\n9. Group related objects using packages if it helps clarify the diagram.\n10. Show any important constraints or rules that apply to the objects or their relationships.\n11. Include a title that describes the scenario or system state being represented.\n\nPlantUML syntax example:\n@startuml\ntitle E-commerce System - Active Order Scenario\n\nobject \"customer:User\" as customer {\n  id = 12345\n  name = \"John Doe\"\n  email = \"john@example.com\"\n}\n\nobject \"order:Order\" as order {\n  id = 67890\n  date = \"2023-07-15\"\n  status = \"Processing\"\n  total = 129.99\n}\n\nobject \"item1:OrderItem\" as item1 {\n  productId = 101\n  quantity = 2\n  price = 49.99\n}\n\nobject \"item2:OrderItem\" as item2 {\n  productId = 202\n  quantity = 1\n  price = 30.01\n}\n\nobject \"product1:Product\" as product1 {\n  id = 101\n  name = \"Widget A\"\n  stock = 50\n}\n\nobject \"product2:Product\" as product2 {\n  id = 202\n  name = \"Gadget B\"\n  stock = 25\n}\n\ncustomer -- order : places\norder \"1\" *-- \"1..*\" item1 : contains\norder \"1\" *-- \"1..*\" item2 : contains\nitem1 -- product1 : references\nitem2 -- product2 : references\n\nnote right of order : This represents an\nactive order in the system\n\n@enduml\n\nGenerate the complete PlantUML code for the object diagram, starting with @startuml and ending with @enduml."
  },
  "deployment": {
    "prompt": "Create a deployment diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for deployment diagrams.\n2. Identify all major hardware nodes in the system (servers, client machines, devices).\n3. Show the software components or artifacts deployed on each node.\n4. Illustrate the physical connections or communication paths between nodes.\n5. Include important protocols or technologies used for communication (e.g., HTTP, TCP/IP).\n6. Show any important hardware specifications for nodes if relevant.\n7. Use stereotypes to clarify the types of nodes and components.\n8. Include any significant external systems or services.\n9. Add notes to explain complex setups or provide additional context.\n10. Use real names for nodes, components, and connections from the analyzed repository.\n11. Show any important virtualization or containerization if used.\n12. Include a title that reflects the overall deployment architecture.\n\nPlantUML syntax example:\n@startuml\ntitle E-commerce System Deployment\n\ncloud \"Internet\" {\n}\n\nnode \"User Device\" as userDevice {\n  artifact \"Web Browser\" as browser\n  artifact \"Mobile App\" as mobileApp\n}\n\nnode \"Load Balancer\" as loadBalancer {\n  component \"Nginx\" as nginx\n}\n\nnode \"Application Server\" as appServer {\n  component \"Web Application\" as webApp\n  component \"API Server\" as apiServer\n}\n\nnode \"Database Server\" as dbServer {\n  database \"PostgreSQL\" as postgres\n}\n\nnode \"Caching Server\" as cacheServer {\n  database \"Redis\" as redis\n}\n\ncloud \"External Services\" {\n  [Payment Gateway]\n  [Email Service]\n}\n\nUserDevice -- Internet : HTTPS\nInternet -- loadBalancer : HTTPS\nloadBalancer -- appServer : HTTP\nappServer -- dbServer : SQL/TLS\nappServer -- cacheServer : TCP\nappServer -- [Payment Gateway] : HTTPS\nappServer -- [Email Service] : SMTP\n\nnote right of appServer : Deployed in\nKubernetes cluster\n\n@enduml\n\nGenerate the complete PlantUML code for the deployment diagram, starting with @startuml and ending with @enduml."
  },
    "timing": {
      "prompt": "Create a timing diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for timing diagrams.\n2. Identify key components or actors whose states change over time.\n3. Define the timeline, including start and end times, and any significant time points.\n4. Show the changes in state or value for each component over time.\n5. Include important events or triggers that cause state changes.\n6. Use appropriate scales for time (e.g., milliseconds, seconds, minutes).\n7. Show concurrent activities or state changes across different components.\n8. Include any critical timing constraints or deadlines.\n9. Add notes to explain complex timing relationships or provide context.\n10. Use real component names, state names, and event names from the analyzed repository.\n11. Show any periodic or repeating patterns if applicable.\n12. Include a title that describes the process or scenario being illustrated.\n\nPlantUML syntax example:\n@startuml\ntitle Web Application Request Processing Timeline\n\nconcise \"User\" as U\nrobust \"Web Server\" as WS\nrobust \"Database\" as DB\n\n@0\nU is Idle\nWS is Idle\nDB is Idle\n\n@100\nU -> WS : Request\nU is WaitingForResponse\nWS is ProcessingRequest\n\n@200\nWS -> DB : Query\nWS is WaitingForDB\nDB is Querying\n\n@300\nDB -> WS : Result\nDB is Idle\nWS is PreparingResponse\n\n@400\nWS -> U : Response\nU is ProcessingResponse\nWS is Idle\n\n@500\nU is Idle\n\n@enduml\n\nGenerate the complete PlantUML code for the timing diagram, starting with @startuml and ending with @enduml."
    },
    "mindmap": {
      "prompt": "Create a mindmap diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for mindmap diagrams.\n2. Start with the central concept or main topic of the project.\n3. Identify major categories or aspects of the project as primary branches.\n4. Break down each primary branch into subcategories or specific features.\n5. Continue breaking down ideas into smaller subtopics as needed.\n6. Use different colors or styles for different levels or types of information.\n7. Include important relationships or connections between different branches.\n8. Add brief notes or explanations where necessary.\n9. Use real project names, feature names, and concepts from the analyzed repository.\n10. Organize information in a logical and hierarchical manner.\n11. Include any cross-cutting concerns or themes that apply to multiple areas.\n12. Add a title that reflects the overall scope of the mindmap.\n\nPlantUML syntax example:\n@startmindmap\ntitle E-commerce Platform Overview\n\n* E-commerce Platform\n** Frontend\n*** Web Interface\n**** Product Catalog\n**** Shopping Cart\n**** Checkout Process\n*** Mobile App\n**** iOS Version\n**** Android Version\n** Backend\n*** User Management\n**** Authentication\n**** Authorization\n**** Profile Management\n*** Product Management\n**** Inventory\n**** Pricing\n**** Categories\n*** Order Processing\n**** Payment Integration\n**** Shipping\n**** Invoicing\n** Infrastructure\n*** Cloud Hosting\n*** Database\n*** Caching\n*** Load Balancing\n** Analytics\n*** Sales Reports\n*** User Behavior\n*** Performance Metrics\n\nlegend right\n  Colors indicate priority:\n  <back:lightgreen>High Priority</back>\n  <back:lightyellow>Medium Priority</back>\n  <back:lightpink>Low Priority</back>\nendlegend\n\n@endmindmap\n\nGenerate the complete PlantUML code for the mindmap diagram, starting with @startmindmap and ending with @endmindmap."
    },
    "json": {
      "prompt": "Create a JSON diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for JSON diagrams.\n2. Identify a key data structure, configuration, or API response in the project to represent.\n3. Structure the JSON with appropriate nesting levels.\n4. Include all relevant keys and values, using realistic data types.\n5. Represent arrays and nested objects accurately.\n6. Use actual field names and data structures from the analyzed repository.\n7. Include any important metadata or schema information.\n8. Add comments to explain the purpose of key elements or provide context.\n9. Ensure the JSON structure accurately reflects the data relationships in the system.\n10. Include any optional fields that are significant to the system's operation.\n11. Use meaningful sample values that illustrate the purpose of each field.\n12. Add a title that describes the JSON structure being represented.\n\nPlantUML syntax example:\n@startjson\ntitle User Profile JSON Structure\n\n{\n  \"user\": {\n    \"id\": \"12345\",\n    \"username\": \"johndoe\",\n    \"email\": \"john@example.com\",\n    \"profile\": {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"age\": 30,\n      \"location\": {\n        \"city\": \"New York\",\n        \"country\": \"USA\"\n      }\n    },\n    \"preferences\": {\n      \"theme\": \"dark\",\n      \"notifications\": true\n    },\n    \"orders\": [\n      {\n        \"orderId\": \"ORD-001\",\n        \"date\": \"2023-07-15\",\n        \"total\": 99.99\n      },\n      {\n        \"orderId\": \"ORD-002\",\n        \"date\": \"2023-07-20\",\n        \"total\": 149.99\n      }\n    ]\n  }\n}\n\n@endjson\n\nGenerate the complete PlantUML code for the JSON diagram, starting with @startjson and ending with @endjson."
    },
    "yaml": {
      "prompt": "Create a YAML diagram using PlantUML syntax based on the analyzed repository.\n\nInstructions:\n1. Use proper PlantUML syntax for YAML diagrams.\n2. Identify a key configuration, data structure, or specification in the project to represent.\n3. Structure the YAML with appropriate indentation and nesting.\n4. Include all relevant keys and values, using realistic data types.\n5. Represent lists and nested structures accurately.\n6. Use actual configuration keys and structure from the analyzed repository.\n7. Include any important comments or annotations used in the original YAML.\n8. Add explanatory notes for complex configurations or to provide context.\n9. Ensure the YAML structure accurately reflects the configuration or data relationships in the system.\n10. Include any environment-specific variations if relevant.\n11. Use meaningful sample values that illustrate the purpose of each configuration item.\n12. Add a title that describes the YAML structure being represented.\n\nPlantUML syntax example:\n@startyaml\ntitle Application Deployment Configuration\n\nversion: '3'\nservices:\n  web:\n    image: myapp/web:latest\n    ports:\n      - \"80:8080\"\n    environment:\n      - NODE_ENV=production\n      - DATABASE_URL=postgres://user:pass@db:5432/myapp\n    depends_on:\n      - db\n    volumes:\n      - ./app:/usr/src/app\n    networks:\n      - frontend\n      - backend\n\n  db:\n    image: postgres:13\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=myapp\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n    networks:\n      - backend\n\nvolumes:\n  db-data:\n\nnetworks:\n  frontend:\n  backend:\n\n@endyaml\n\nGenerate the complete PlantUML code for the YAML diagram, starting with @startyaml and ending with @endyaml."
    }
  }
