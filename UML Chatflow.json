{
  "nodes": [
    {
      "id": "openAIEmbeddings_0",
      "position": {
        "x": 609.4065706117486,
        "y": 705.99747184681
      },
      "type": "customNode",
      "data": {
        "id": "openAIEmbeddings_0",
        "label": "OpenAI Embeddings",
        "version": 4,
        "name": "openAIEmbeddings",
        "type": "OpenAIEmbeddings",
        "baseClasses": [
          "OpenAIEmbeddings",
          "Embeddings"
        ],
        "category": "Embeddings",
        "description": "OpenAI API to generate embeddings for a given text",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "openAIEmbeddings_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "text-embedding-ada-002",
            "id": "openAIEmbeddings_0-input-modelName-asyncOptions"
          },
          {
            "label": "Strip New Lines",
            "name": "stripNewLines",
            "type": "boolean",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-stripNewLines-boolean"
          },
          {
            "label": "Batch Size",
            "name": "batchSize",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-batchSize-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-basepath-string"
          },
          {
            "label": "Dimensions",
            "name": "dimensions",
            "type": "number",
            "optional": true,
            "additionalParams": true,
            "id": "openAIEmbeddings_0-input-dimensions-number"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "modelName": "text-embedding-ada-002",
          "stripNewLines": "",
          "batchSize": "",
          "timeout": "",
          "basepath": "",
          "dimensions": ""
        },
        "outputAnchors": [
          {
            "id": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
            "name": "openAIEmbeddings",
            "label": "OpenAIEmbeddings",
            "description": "OpenAI API to generate embeddings for a given text",
            "type": "OpenAIEmbeddings | Embeddings"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 424,
      "positionAbsolute": {
        "x": 609.4065706117486,
        "y": 705.99747184681
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "qdrant_0",
      "position": {
        "x": 1098.7713962868447,
        "y": -36.901745593464454
      },
      "type": "customNode",
      "data": {
        "id": "qdrant_0",
        "label": "Qdrant",
        "version": 3,
        "name": "qdrant",
        "type": "Qdrant",
        "baseClasses": [
          "Qdrant",
          "VectorStoreRetriever",
          "BaseRetriever"
        ],
        "category": "Vector Stores",
        "description": "Upsert embedded data and perform similarity search upon query using Qdrant, a scalable open source vector database written in Rust",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "description": "Only needed when using Qdrant cloud hosted",
            "optional": true,
            "credentialNames": [
              "qdrantApi"
            ],
            "id": "qdrant_0-input-credential-credential"
          },
          {
            "label": "Qdrant Server URL",
            "name": "qdrantServerUrl",
            "type": "string",
            "placeholder": "http://localhost:6333",
            "id": "qdrant_0-input-qdrantServerUrl-string"
          },
          {
            "label": "Qdrant Collection Name",
            "name": "qdrantCollection",
            "type": "string",
            "id": "qdrant_0-input-qdrantCollection-string"
          },
          {
            "label": "Vector Dimension",
            "name": "qdrantVectorDimension",
            "type": "number",
            "default": 1536,
            "additionalParams": true,
            "id": "qdrant_0-input-qdrantVectorDimension-number"
          },
          {
            "label": "Upsert Batch Size",
            "name": "batchSize",
            "type": "number",
            "step": 1,
            "description": "Upsert in batches of size N",
            "additionalParams": true,
            "optional": true,
            "id": "qdrant_0-input-batchSize-number"
          },
          {
            "label": "Similarity",
            "name": "qdrantSimilarity",
            "description": "Similarity measure used in Qdrant.",
            "type": "options",
            "default": "Cosine",
            "options": [
              {
                "label": "Cosine",
                "name": "Cosine"
              },
              {
                "label": "Euclid",
                "name": "Euclid"
              },
              {
                "label": "Dot",
                "name": "Dot"
              }
            ],
            "additionalParams": true,
            "id": "qdrant_0-input-qdrantSimilarity-options"
          },
          {
            "label": "Additional Collection Cofiguration",
            "name": "qdrantCollectionConfiguration",
            "description": "Refer to <a target=\"_blank\" href=\"https://qdrant.tech/documentation/concepts/collections\">collection docs</a> for more reference",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "qdrant_0-input-qdrantCollectionConfiguration-json"
          },
          {
            "label": "Top K",
            "name": "topK",
            "description": "Number of top results to fetch. Default to 4",
            "placeholder": "4",
            "type": "number",
            "additionalParams": true,
            "optional": true,
            "id": "qdrant_0-input-topK-number"
          },
          {
            "label": "Qdrant Search Filter",
            "name": "qdrantFilter",
            "description": "Only return points which satisfy the conditions",
            "type": "json",
            "additionalParams": true,
            "optional": true,
            "id": "qdrant_0-input-qdrantFilter-json"
          }
        ],
        "inputAnchors": [
          {
            "label": "Document",
            "name": "document",
            "type": "Document",
            "list": true,
            "optional": true,
            "id": "qdrant_0-input-document-Document"
          },
          {
            "label": "Embeddings",
            "name": "embeddings",
            "type": "Embeddings",
            "id": "qdrant_0-input-embeddings-Embeddings"
          },
          {
            "label": "Record Manager",
            "name": "recordManager",
            "type": "RecordManager",
            "description": "Keep track of the record to prevent duplication",
            "optional": true,
            "id": "qdrant_0-input-recordManager-RecordManager"
          }
        ],
        "inputs": {
          "document": [],
          "embeddings": "{{openAIEmbeddings_0.data.instance}}",
          "recordManager": "",
          "qdrantServerUrl": "http://qdrant:6333",
          "qdrantCollection": "code3",
          "qdrantVectorDimension": 1536,
          "batchSize": "",
          "qdrantSimilarity": "Cosine",
          "qdrantCollectionConfiguration": "",
          "topK": "10",
          "qdrantFilter": ""
        },
        "outputAnchors": [
          {
            "name": "output",
            "label": "Output",
            "type": "options",
            "description": "",
            "options": [
              {
                "id": "qdrant_0-output-retriever-Qdrant|VectorStoreRetriever|BaseRetriever",
                "name": "retriever",
                "label": "Qdrant Retriever",
                "description": "",
                "type": "Qdrant | VectorStoreRetriever | BaseRetriever"
              },
              {
                "id": "qdrant_0-output-vectorStore-Qdrant|VectorStore",
                "name": "vectorStore",
                "label": "Qdrant Vector Store",
                "description": "",
                "type": "Qdrant | VectorStore"
              }
            ],
            "default": "retriever"
          }
        ],
        "outputs": {
          "output": "retriever"
        },
        "selected": false
      },
      "width": 300,
      "height": 704,
      "positionAbsolute": {
        "x": 1098.7713962868447,
        "y": -36.901745593464454
      },
      "selected": false,
      "dragging": false
    },
    {
      "id": "chatOpenAI_0",
      "position": {
        "x": 1502.0076145268572,
        "y": -429.24507194700664
      },
      "type": "customNode",
      "data": {
        "id": "chatOpenAI_0",
        "label": "ChatOpenAI",
        "version": 6,
        "name": "chatOpenAI",
        "type": "ChatOpenAI",
        "baseClasses": [
          "ChatOpenAI",
          "BaseChatModel",
          "BaseLanguageModel",
          "Runnable"
        ],
        "category": "Chat Models",
        "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "credentialNames": [
              "openAIApi"
            ],
            "id": "chatOpenAI_0-input-credential-credential"
          },
          {
            "label": "Model Name",
            "name": "modelName",
            "type": "asyncOptions",
            "loadMethod": "listModels",
            "default": "gpt-3.5-turbo",
            "id": "chatOpenAI_0-input-modelName-asyncOptions"
          },
          {
            "label": "Temperature",
            "name": "temperature",
            "type": "number",
            "step": 0.1,
            "default": 0.9,
            "optional": true,
            "id": "chatOpenAI_0-input-temperature-number"
          },
          {
            "label": "Max Tokens",
            "name": "maxTokens",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-maxTokens-number"
          },
          {
            "label": "Top Probability",
            "name": "topP",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-topP-number"
          },
          {
            "label": "Frequency Penalty",
            "name": "frequencyPenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-frequencyPenalty-number"
          },
          {
            "label": "Presence Penalty",
            "name": "presencePenalty",
            "type": "number",
            "step": 0.1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-presencePenalty-number"
          },
          {
            "label": "Timeout",
            "name": "timeout",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-timeout-number"
          },
          {
            "label": "BasePath",
            "name": "basepath",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-basepath-string"
          },
          {
            "label": "BaseOptions",
            "name": "baseOptions",
            "type": "json",
            "optional": true,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-baseOptions-json"
          },
          {
            "label": "Allow Image Uploads",
            "name": "allowImageUploads",
            "type": "boolean",
            "description": "Automatically uses gpt-4-vision-preview when image is being uploaded from chat. Only works with LLMChain, Conversation Chain, ReAct Agent, and Conversational Agent",
            "default": false,
            "optional": true,
            "id": "chatOpenAI_0-input-allowImageUploads-boolean"
          },
          {
            "label": "Image Resolution",
            "description": "This parameter controls the resolution in which the model views the image.",
            "name": "imageResolution",
            "type": "options",
            "options": [
              {
                "label": "Low",
                "name": "low"
              },
              {
                "label": "High",
                "name": "high"
              },
              {
                "label": "Auto",
                "name": "auto"
              }
            ],
            "default": "low",
            "optional": false,
            "additionalParams": true,
            "id": "chatOpenAI_0-input-imageResolution-options"
          }
        ],
        "inputAnchors": [
          {
            "label": "Cache",
            "name": "cache",
            "type": "BaseCache",
            "optional": true,
            "id": "chatOpenAI_0-input-cache-BaseCache"
          }
        ],
        "inputs": {
          "cache": "{{redisCache_0.data.instance}}",
          "modelName": "gpt-4o",
          "temperature": "0.1",
          "maxTokens": "",
          "topP": "",
          "frequencyPenalty": "",
          "presencePenalty": "",
          "timeout": "",
          "basepath": "",
          "baseOptions": "",
          "allowImageUploads": "",
          "imageResolution": "low"
        },
        "outputAnchors": [
          {
            "id": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
            "name": "chatOpenAI",
            "label": "ChatOpenAI",
            "description": "Wrapper around OpenAI large language models that use the Chat endpoint",
            "type": "ChatOpenAI | BaseChatModel | BaseLanguageModel | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 670,
      "selected": false,
      "positionAbsolute": {
        "x": 1502.0076145268572,
        "y": -429.24507194700664
      },
      "dragging": false
    },
    {
      "id": "conversationalRetrievalQAChain_0",
      "position": {
        "x": 2011.0752329133543,
        "y": 144.1017972543982
      },
      "type": "customNode",
      "data": {
        "id": "conversationalRetrievalQAChain_0",
        "label": "Conversational Retrieval QA Chain",
        "version": 3,
        "name": "conversationalRetrievalQAChain",
        "type": "ConversationalRetrievalQAChain",
        "baseClasses": [
          "ConversationalRetrievalQAChain",
          "BaseChain",
          "Runnable"
        ],
        "category": "Chains",
        "description": "Document QA - built on RetrievalQAChain to provide a chat history component",
        "inputParams": [
          {
            "label": "Return Source Documents",
            "name": "returnSourceDocuments",
            "type": "boolean",
            "optional": true,
            "id": "conversationalRetrievalQAChain_0-input-returnSourceDocuments-boolean"
          },
          {
            "label": "Rephrase Prompt",
            "name": "rephrasePrompt",
            "type": "string",
            "description": "Using previous chat history, rephrase question into a standalone question",
            "warning": "Prompt must include input variables: {chat_history} and {question}",
            "rows": 4,
            "additionalParams": true,
            "optional": true,
            "default": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone Question:",
            "id": "conversationalRetrievalQAChain_0-input-rephrasePrompt-string"
          },
          {
            "label": "Response Prompt",
            "name": "responsePrompt",
            "type": "string",
            "description": "Taking the rephrased question, search for answer from the provided context",
            "warning": "Prompt must include input variable: {context}",
            "rows": 4,
            "additionalParams": true,
            "optional": true,
            "default": "I want you to act as a document that I am having a conversation with. Your name is \"AI Assistant\". Using the provided context, answer the user's question to the best of your ability using the resources provided.\nIf there is nothing in the context relevant to the question at hand, just say \"Hmm, I'm not sure\" and stop after that. Refuse to answer any question not about the info. Never break character.\n------------\n{context}\n------------\nREMEMBER: If there is no relevant information within the context, just say \"Hmm, I'm not sure\". Don't try to make up an answer. Never break character.",
            "id": "conversationalRetrievalQAChain_0-input-responsePrompt-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Chat Model",
            "name": "model",
            "type": "BaseChatModel",
            "id": "conversationalRetrievalQAChain_0-input-model-BaseChatModel"
          },
          {
            "label": "Vector Store Retriever",
            "name": "vectorStoreRetriever",
            "type": "BaseRetriever",
            "id": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever"
          },
          {
            "label": "Memory",
            "name": "memory",
            "type": "BaseMemory",
            "optional": true,
            "description": "If left empty, a default BufferMemory will be used",
            "id": "conversationalRetrievalQAChain_0-input-memory-BaseMemory"
          },
          {
            "label": "Input Moderation",
            "description": "Detect text that could generate harmful output and prevent it from being sent to the language model",
            "name": "inputModeration",
            "type": "Moderation",
            "optional": true,
            "list": true,
            "id": "conversationalRetrievalQAChain_0-input-inputModeration-Moderation"
          }
        ],
        "inputs": {
          "model": "{{chatOpenAI_0.data.instance}}",
          "vectorStoreRetriever": "{{qdrant_0.data.instance}}",
          "memory": "",
          "returnSourceDocuments": false,
          "rephrasePrompt": "Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone Question:",
          "responsePrompt": "Analyze the entire GitHub repository and generate JSON structures for UML and other diagrams that best represent the project architecture and flow. Follow these strict rules:\n\n1. Examine all code files, focusing on their interrelationships and overall structure.\n2. Determine which diagram types would best represent the project (e.g., class, sequence, activity, component, etc.).\n3. For each selected diagram type, generate a JSON structure that strictly adheres to the following format:\n\n4. Ensure each JSON structure is valid and matches the expected input for the DiagramGenerator class.\n5. Include metadata about source files for each element in the diagrams.\n\nGenerate JSON structures for the following diagram types as applicable:\n------------\n{context}\n------------\nVery Important: Your response should be only valid JSON, without any additional explanation or text.",
          "inputModeration": ""
        },
        "outputAnchors": [
          {
            "id": "conversationalRetrievalQAChain_0-output-conversationalRetrievalQAChain-ConversationalRetrievalQAChain|BaseChain|Runnable",
            "name": "conversationalRetrievalQAChain",
            "label": "ConversationalRetrievalQAChain",
            "description": "Document QA - built on RetrievalQAChain to provide a chat history component",
            "type": "ConversationalRetrievalQAChain | BaseChain | Runnable"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 532,
      "selected": false,
      "positionAbsolute": {
        "x": 2011.0752329133543,
        "y": 144.1017972543982
      },
      "dragging": false
    },
    {
      "id": "redisEmbeddingsCache_0",
      "position": {
        "x": 1055.99964648871,
        "y": 828.8027740453232
      },
      "type": "customNode",
      "data": {
        "id": "redisEmbeddingsCache_0",
        "label": "Redis Embeddings Cache",
        "version": 1,
        "name": "redisEmbeddingsCache",
        "type": "RedisEmbeddingsCache",
        "baseClasses": [
          "RedisEmbeddingsCache",
          "Embeddings"
        ],
        "category": "Cache",
        "description": "Cache generated Embeddings in Redis to avoid needing to recompute them.",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "optional": true,
            "credentialNames": [
              "redisCacheApi",
              "redisCacheUrlApi"
            ],
            "id": "redisEmbeddingsCache_0-input-credential-credential"
          },
          {
            "label": "Time to Live (ms)",
            "name": "ttl",
            "type": "number",
            "step": 10,
            "default": 3600,
            "optional": true,
            "additionalParams": true,
            "id": "redisEmbeddingsCache_0-input-ttl-number"
          },
          {
            "label": "Namespace",
            "name": "namespace",
            "type": "string",
            "optional": true,
            "additionalParams": true,
            "id": "redisEmbeddingsCache_0-input-namespace-string"
          }
        ],
        "inputAnchors": [
          {
            "label": "Embeddings",
            "name": "embeddings",
            "type": "Embeddings",
            "id": "redisEmbeddingsCache_0-input-embeddings-Embeddings"
          }
        ],
        "inputs": {
          "embeddings": "{{openAIEmbeddings_0.data.instance}}",
          "ttl": 3600,
          "namespace": ""
        },
        "outputAnchors": [
          {
            "id": "redisEmbeddingsCache_0-output-redisEmbeddingsCache-RedisEmbeddingsCache|Embeddings",
            "name": "redisEmbeddingsCache",
            "label": "RedisEmbeddingsCache",
            "description": "Cache generated Embeddings in Redis to avoid needing to recompute them.",
            "type": "RedisEmbeddingsCache | Embeddings"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 379,
      "selected": false,
      "positionAbsolute": {
        "x": 1055.99964648871,
        "y": 828.8027740453232
      },
      "dragging": false
    },
    {
      "id": "redisCache_0",
      "position": {
        "x": 792.2854913670287,
        "y": -384.98244314975136
      },
      "type": "customNode",
      "data": {
        "id": "redisCache_0",
        "label": "Redis Cache",
        "version": 1,
        "name": "redisCache",
        "type": "RedisCache",
        "baseClasses": [
          "RedisCache",
          "BaseCache"
        ],
        "category": "Cache",
        "description": "Cache LLM response in Redis, useful for sharing cache across multiple processes or servers",
        "inputParams": [
          {
            "label": "Connect Credential",
            "name": "credential",
            "type": "credential",
            "optional": true,
            "credentialNames": [
              "redisCacheApi",
              "redisCacheUrlApi"
            ],
            "id": "redisCache_0-input-credential-credential"
          },
          {
            "label": "Time to Live (ms)",
            "name": "ttl",
            "type": "number",
            "step": 1,
            "optional": true,
            "additionalParams": true,
            "id": "redisCache_0-input-ttl-number"
          }
        ],
        "inputAnchors": [],
        "inputs": {
          "ttl": ""
        },
        "outputAnchors": [
          {
            "id": "redisCache_0-output-redisCache-RedisCache|BaseCache",
            "name": "redisCache",
            "label": "RedisCache",
            "description": "Cache LLM response in Redis, useful for sharing cache across multiple processes or servers",
            "type": "RedisCache | BaseCache"
          }
        ],
        "outputs": {},
        "selected": false
      },
      "width": 300,
      "height": 328,
      "selected": false,
      "positionAbsolute": {
        "x": 792.2854913670287,
        "y": -384.98244314975136
      },
      "dragging": false
    }
  ],
  "edges": [
    {
      "source": "openAIEmbeddings_0",
      "sourceHandle": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
      "target": "qdrant_0",
      "targetHandle": "qdrant_0-input-embeddings-Embeddings",
      "type": "buttonedge",
      "id": "openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-qdrant_0-qdrant_0-input-embeddings-Embeddings"
    },
    {
      "source": "chatOpenAI_0",
      "sourceHandle": "chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable",
      "target": "conversationalRetrievalQAChain_0",
      "targetHandle": "conversationalRetrievalQAChain_0-input-model-BaseChatModel",
      "type": "buttonedge",
      "id": "chatOpenAI_0-chatOpenAI_0-output-chatOpenAI-ChatOpenAI|BaseChatModel|BaseLanguageModel|Runnable-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-model-BaseChatModel"
    },
    {
      "source": "qdrant_0",
      "sourceHandle": "qdrant_0-output-retriever-Qdrant|VectorStoreRetriever|BaseRetriever",
      "target": "conversationalRetrievalQAChain_0",
      "targetHandle": "conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever",
      "type": "buttonedge",
      "id": "qdrant_0-qdrant_0-output-retriever-Qdrant|VectorStoreRetriever|BaseRetriever-conversationalRetrievalQAChain_0-conversationalRetrievalQAChain_0-input-vectorStoreRetriever-BaseRetriever"
    },
    {
      "source": "redisCache_0",
      "sourceHandle": "redisCache_0-output-redisCache-RedisCache|BaseCache",
      "target": "chatOpenAI_0",
      "targetHandle": "chatOpenAI_0-input-cache-BaseCache",
      "type": "buttonedge",
      "id": "redisCache_0-redisCache_0-output-redisCache-RedisCache|BaseCache-chatOpenAI_0-chatOpenAI_0-input-cache-BaseCache"
    },
    {
      "source": "openAIEmbeddings_0",
      "sourceHandle": "openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings",
      "target": "redisEmbeddingsCache_0",
      "targetHandle": "redisEmbeddingsCache_0-input-embeddings-Embeddings",
      "type": "buttonedge",
      "id": "openAIEmbeddings_0-openAIEmbeddings_0-output-openAIEmbeddings-OpenAIEmbeddings|Embeddings-redisEmbeddingsCache_0-redisEmbeddingsCache_0-input-embeddings-Embeddings"
    }
  ]
}